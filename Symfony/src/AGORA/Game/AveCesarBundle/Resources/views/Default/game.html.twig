<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Ave Cesar - {{ gameName }}</title>
    <link rel="stylesheet" type="text/css" href="{{ asset('bundles/agoragameavecesar/css/style.css') }}">
    <script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script>
    <script src="{{ asset('bundles/agoragameavecesar/script/mapping' ~ boardId ~ '.js') }}"></script>
    <script src="{{ asset('bundles/agoragameavecesar/script/boardPosition.js') }}"></script>
    <script> var playerUsername = "";</script>
</head>
<body>
<div id="gameContent">
    <div id="gameTitle">
        <img src="{{ asset('bundles/agoragameavecesar/image/logo.png') }}" alt="logoAveCesar">
        <div id="playerName">
            {% for p in players %}
                {% set img = 'bundles/agoragameavecesar/image/char' ~ loop.index ~ '.png' %}
                <div>
                    <img class="smallChar" src="{{ asset(img) }}" alt="smallChar">
                    {% if p.id == player.id %}
                        <script> playerUsername = "{{ p.userId.username }}"</script>
                        <p class="bold">{{ p.userId.username|slice(0, 8) }}</p>
                    {% else %}
                        <p>{{ p.userId.username|slice(0, 8) }}</p>
                    {% endif %}
                    {% if p.cesar %}
                        <img class="piece" src="{{ asset('bundles/agoragameavecesar/image/piece.png') }}" alt="piece">
                    {% else %}
                        <img class="piece hidden" src="{{ asset('bundles/agoragameavecesar/image/piece.png') }}" alt="hiddenPiece">
                    {% endif %}
                    <p class="lap">Tour {{ p.lap }}</p>
                </div>
            {% endfor %}
        </div>
    </div>
    <div id="gameBoard">
        {{ source('@AGORAGameAveCesar/Default/plateau' ~ boardId ~ '.svg') }}
        <img src="{{ asset('bundles/agoragameavecesar/image/plateau' ~ boardId ~ '.jpg') }}" alt="plateau" class="map">
    </div>

    <div id="gameInfo">
        <div id="deck">
            <div class="verticalTitle"><p style="margin-top: 96px;">Pioche</p></div>
            <div id="deckCard">
                <img src="{{ asset('bundles/agoragameavecesar/image/dos_carte.jpg') }}">
            </div>
        </div>
        <div id="myCards">
            <div class="verticalTitle"><p style="margin-top: 80px;">Main</p></div>
            <div id="handCards"></div>
        </div>
        <div id="chatContainer">
            <div class="verticalTitle"><p style="margin-top: 120px;">Historique</p></div>
            <div id="historique">
                <ul>
                </ul>
            </div>
        </div>
    </div>
</div>

<script>
    cardPlayed = null; // Index dans la main de la carte selectionné
    selectedCard = null;
    const maxPlayers = {{ maxPlayers }};
    var handNode = [];
    imagePath = "{{ asset('bundles/agoragameavecesar/image/') }}";
    var hand = "{{ player.hand }}".split(",").map(x => parseInt(x));
    var selfId = {{ player.id }};
    var playerPosition = "{{ player.position }}";
    var firstPlayer = {{ firstPlayer.id }};
    var boardId = {{ boardId }};
    var players = new Array();
    {% for p in players %}
    players.push({
        id: {{ p.id }},
        name: "{{ p.userId.username }}",
        position: "{{ p.position }}"
    });
    {% endfor %}

    for (let i = 0; i < players.length; i++) {
        createPawn(i);
    }

    if (maxPlayers !== players.length) {
        var waitingPlayers = $('<div>');
        waitingPlayers.text("En attente des joueurs ...");
        waitingPlayers.attr('id', "waitingPlayers");
        $('#handCards').append(waitingPlayers);
    } else {
        displayCards(hand);
        newRound({{ nextPlayer }});
        updatePlayableCards();
    }
    
    //On retrouve l'url de base du serveur à la barbare
    var urlSock = "{{ app.request.getSchemeAndHttpHost() }}";
    //On enlève le http (ou https)
    urlSock = urlSock.split("/");
    urlSock = urlSock[2];
    //On enlève le port
    urlSock = urlSock.split(":");
    urlSock = urlSock[0];
    var conn = new WebSocket('ws://'+ urlSock +':8090');
    conn.onopen = function(e) {
        console.log("Connection established!");
        connect();
    };

    function handleConnect(playerId, username, position) {
        if (playerId !== selfId) log(username + " s'est connecté.");
        console.log("User " + username + " with id " + playerId + " has connected.");
        if (!players.find(x => x.id === playerId)) {
            addNewPlayer(playerId, username, position);
        }
    }

    function handleMove(playerId, position, nextPlayer, newFirstPlayer, cesar, lap) {
        console.log("Player " + playerId + " moved to position " + position);
        console.log("Next player is player " + nextPlayer);
        log(getUsername(newFirstPlayer) + " devient premier !");
        newRound(nextPlayer);
        for (var i in players) {
            if (players[i].id === playerId) {
                selectedCard = null;
                players[i].position = position;
                placePawn(players[i], position);
                firstPlayer = newFirstPlayer;
                if (players[i].id == selfId) {
                    playerPosition = position;
                }
                if (cesar) {
                    showCesar(i);
                }
                updateLap(i, lap);
                updatePlayableCards();
                return;
            }
        }
        updateLap(i, lap);
        updatePlayableCards();
    }

    function handlePass(playerId, nextPlayer) {
        console.log("Player " + playerId + " has passed");
        console.log("Next player is player " + nextPlayer);
        log(getUsername(nextPlayer) + " passe son tour.");
        newRound(nextPlayer);
        updatePlayableCards();
    }

    function handleCard(card) {
        console.log("Received card : " + card);
        hand[cardPlayed] = card;
        updateCard(cardPlayed);
        cardPlayed = null;
    }

    function handleError(message) {
        console.log("Erreur reçue : " + message);
    }

    function handleMoveError(position) {
        let c = $("#gameBoardSvg").find("[onclick=\"" + "playOnCell('" + position + "')" + "\"]");
        c.addClass("wrong"); // color the location to red
        wrongTimeout = setTimeout(() => {c.removeClass("wrong")}, 50);
    }

    function handleFinish(message) {
        console.log(message);
        var str = "Classement :\n";
        var tmp = [];
        for (var i in message) {
            if (i != 0) {
                str += (parseInt(i)) + " " + message[i][0] + "\n";
            }
        }
        str += (message.length) + " " + message[0][0] + "\n";
        if(!alert(str))
            window.location.href = '{{ app.request.getSchemeAndHttpHost() }}';
    }

    function handleStart() {
        document.location = window.location.href;
    }

    //Permet de charger le tchat lorsqu'un joueur se connecte
    function loadTchat(data) {
        for (var i in data.tchat) {
            var msg = data.tchat[i];
            if (msg.playerId == "{{ player.id }}") {

                var div = document.createElement("div");
                div.textContent = "Moi : " + msg.message;
                div.className = "messageMy";
                document.getElementById("discussion").appendChild(div);
            } else {
                var div = document.createElement("div");
                div.className = "messageOther";
                div.textContent = msg.username + " : " + msg.message;
                document.getElementById("discussion").appendChild(div);
            }
        }
    }

    function handleMessage(data) {
        var div = document.createElement("div");
        div.className = "messageOther";
        div.textContent = data.username + " : " + data.message;
        document.getElementById("discussion").appendChild(div);
    }

    conn.onmessage = function(e) {
        console.log("message : " + e.data);
        var msg = JSON.parse(e.data);
        if (msg.type == "connect") {
            handleConnect(msg.playerId, msg.username, msg.position);
        } else if (msg.type == "move") {
            handleMove(msg.playerId, msg.position, msg.nextPlayer, msg.firstPlayer, msg.cesar, msg.lap);
        } else if (msg.type == "pass") {
            handlePass(msg.playerId, msg.nextPlayer)
        } else if (msg.type == "card") {
            handleCard(msg.card);
        } else if (msg.type == "error") {
            handleError(msg.message);
        } else if (msg.type == "moveError") {
            handleMoveError(msg.position);
        } else if (msg.type == "finished") {
            handleFinish(msg.ranking);
        } else if (msg.type == "start") {
            handleStart();
        } else if (msg.type == "message") {
            handleMessage(msg);
        } else if (msg.type == "tchatLoad") {
            loadTchat(msg);
        }
    };

    function move(position, card) {
        var content = {
            gameCode: "avc",
            gameId: {{ game.id }},
            playerId: {{ player.id }},
            action: {
                type: "move",
                position: position,
                card: card
            }
        }
        conn.send(JSON.stringify(content));
        console.log(JSON.stringify(content));
    }

    function connect() {
        var content = {
            gameCode: "avc",
            gameId: {{ game.id }},
            playerId: {{ player.id }},
            action: {
                type: "connect"
            }
        }
        conn.send(JSON.stringify(content));
        console.log(JSON.stringify(content));
    }

    function pass() {
        var content = {
            gameCode: "avc",
            gameId: {{ game.id }},
            playerId: {{ player.id }},
            action: {
                type: "pass"
            }
        }
        conn.send(JSON.stringify(content));
        console.log(JSON.stringify(content));
    }

    function log(message) {
        var li = $("<li>").text(message)
        $('#historique ul').prepend(li);
        return li;
    }

    function getUsername(userId) {
        for (var p in players) {
            if (players[p].id == userId) {
                return players[p].name;
            }
        }
        return "";
    }

    function showCesar(index) {
        $('#playerName div img.piece').eq(index).removeClass("hidden");
    }

    function updateLap(index, lap) {
        $('#playerName div p.lap').eq(index).text("Tour " + lap);
    }

    function newRound(playerId) {
        $("#gameBoard").removeClass("blink-outline").removeClass("ready");
        $("#myCards").removeClass("blink-outline");
        
        if (playerId === selfId) {
            log(getUsername(playerId) + ", à votre tour de jouer !");
            document.getElementById("myCards").classList.add("blink-outline");
            playerTurn = true;
        } else {
            log("C'est au tour de " + getUsername(playerId) + " de jouer.");
            console.log("player id qui doit jouer : " + playerId + "  username : " + getUsername(playerId));
            playerTurn = false;
        }
    }
</script>

<!-- Le tchat -->
<div class="tchat">
    <div class="titleTchat">
        <img id="flecheTchat" src="{{ asset('bundles/agoragameavecesar/image/fleche_historique_bas.png') }}" alt="tchat">
        <i>Chat du lobby</i>
    </div>
    <div id="discussion"></div>
    <textarea id="UserMessage" placeholder="Entrez votre message ici"></textarea>
</div>
<button id="buttAcc" onclick="window.location.href = '{{ app.request.getSchemeAndHttpHost() }}'">Accueil</button>

<script> // script gérant le tchat
    document.getElementById('UserMessage').addEventListener('keypress', function (event) {
        var key = event.hasOwnProperty('which') ? event.which : event.keyCode;
        if (key == 13) { // 13 est la touche entrée
            var div = document.createElement("div");
            var message = document.getElementById('UserMessage').value;
            var clientInformation = {
                gameId: {{ game.id }},
                playerId: {{ player.id }},
                action : { type: "message",
                    username: playerUsername,
                    message: message},
                gameCode : "avc"
            }
            div.textContent = "Moi : " + message;
            document.getElementById('UserMessage').value = "";
            div.className = "messageMy";
            document.getElementById("discussion").appendChild(div);
            conn.send(JSON.stringify(clientInformation));
        }
    });

    var IsOpenTchat = 0;
    //Fonction executée lors du cliquage sur le tchat pour l'agrandir/réduire
    function tchatOnClick(e) {
        var tchat = document.getElementsByClassName("tchat")[0];
        if (IsOpenTchat == 0) {
            tchat.style.height = "23em";
            IsOpenTchat = 1;
            $('#flecheTchat')
                .attr("src", "/bundles/agoragameavecesar/image/fleche_historique_haut.png");
        } else {
            tchat.style.height = null;
            IsOpenTchat = 0;
            $('#flecheTchat')
                .attr("src", "/bundles/agoragameavecesar/image/fleche_historique_bas.png");
        }
    }

    var titleChat = document.getElementsByClassName("titleTchat");
    titleChat[0].addEventListener("click", tchatOnClick);
</script>

</body>
</html>
