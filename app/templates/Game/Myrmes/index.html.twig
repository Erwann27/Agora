{% extends 'base.html.twig' %}

{% block title %}Agora - Myrmes{% endblock %}

{% block body %}

    {% set PHASE_WORKER = constant('App\\Entity\\Game\\Myrmes\\MyrmesParameters::PHASE_WORKER') %}
    {% set RESOURCE_DIRT = constant('App\\Entity\\Game\\Myrmes\\MyrmesParameters::RESOURCE_TYPE_DIRT') %}

    <div class="h-screen w-screen overflow-hidden absolute" {{ stimulus_controller('myrmes') }}>
        <div id="index_myrmes" class="h-full w-full static overflow-hidden">
            {#{% block endGame %}
                {{ include('/Game/Myrmes/endGameScreenResult.html.twig') }}
            {% endblock %}#}
            {% block ranking %}
                <div id="ranking"
                     class="absolute bg-gradient-to-b from-[#288420] to-[#2D2D0B] w-[28%] h-[70%] top-0 right-0">
                    {{ include('/Game/Myrmes/Ranking/ranking.html.twig') }}
                </div>
            {% endblock %}
            {% block previewPersonalBoard %}
                <div id="preview"
                     class="absolute bottom-0 flex justify-around items-center
                     bg-gradient-to-b from-[#4C6E9Bff] to-[#20222Dff] w-[28%] h-[30%] right-0">
                    {{ include('/Game/Myrmes/MainBoard/preview.html.twig') }}
                </div>
            {% endblock %}
            {% if not isBirthPhase %}
                {% block playerPersonalBoard %}
                    <div id="playerPersonalBoard" class="flow float-start w-[75%] h-[5/6]"></div>
                {% endblock %}
            {% endif %}
            {% block mainBoard %}
                <div id="mainBoard" class="absolute bottom-0 w-[72%] h-full">
                    {{ include('/Game/Myrmes/MainBoard/mainBoard.html.twig') }}
                </div>
            {% endblock %}
            {% block nav %}
                {{ include('/Game/Utils/navigation.html.twig') }}
            {% endblock %}
            {% block chat %}
                {{ include('/Game/Utils/chat.html.twig') }}
            {% endblock %}
            {% block notification %}
                <div id="notificationsContainer"
                     class="absolute space-y-2 landscape:sm:w-[27%] portrait:w-[30%] landscape:lg:w-[20%]
					 		top-0 right-0 z-[60]">
                </div>
                {{ include('/Game/Utils/notification.html.twig') }}
            {% endblock %}
        </div>
    </div>

    <script type="text/javascript" src="{{ asset('resourcesGames/utils/ingameNotification.js') }}"></script>
    <script type="text/javascript" src="{{ asset('scripts/GameFactory/queue.js') }}"></script>
    <script type="text/javascript" src="{{ asset('scripts/Myrmes/queueWorkerPhase.js') }}"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            {% if needToPlay %}
            new GameNotification(10, 'C\'est votre tour !', 'Jouez votre meilleur coup !', 'ringing', 'yellow');
            {% else %}
            new GameNotification(5, 'C\'est au tour d\'un autre joueur !', '', 'info', 'green');
            {% endif %}
        })

        window.currentTileMode = 1;
    </script>

    {# PERSONAL BOARD MANAGEMENT #}
    <script>
        {% set personalBoardPath = path('app_game_show_myr', {'id': game.id}) ~ 'personalBoard' ~ player.id %}
        const eventSourcePersonalBoard = new EventSource("{{ mercure(personalBoardPath)|escape('js') }}");
        eventSourcePersonalBoard.onmessage = event => {
            let personalBoard = document.getElementById('personalBoard');
            let placeholder = document.createElement("div");
            placeholder.innerHTML = event.data;
            personalBoard.replaceChild(
                    placeholder.firstElementChild.firstElementChild, personalBoard.firstElementChild);
        }
    </script>

    {# QUEUE MANAGEMENT #}
    <script>
        {% set queueWorkerPhasePath = path('app_game_show_myr', {'id': game.id}) ~ 'initWorkerPhase' ~ player.id %}
        const eventSourceWorkerPhase = new EventSource("{{ mercure(queueWorkerPhasePath)|escape('js') }}");
        eventSourceWorkerPhase.onmessage = event => {
            let result = event.data.split(' ')
            initQueue(result[0], result[1], result[2])
        }
    </script>

    {# PREVIEW MANAGEMENT #}
    <script>
        {% set previewPath = path('app_game_show_myr', {'id': game.id}) ~ 'preview' ~ player.id %}
        const eventSourcePreview = new EventSource("{{ mercure(previewPath)|escape('js') }}");
        eventSourcePreview.onmessage = event => {
            const preview = document.getElementById('preview');
            preview.innerHTML = event.data;
        }
    </script>

    {# RANKING MANAGEMENT #}
    <script>
        {% set rankingPath = path('app_game_show_myr', {'id': game.id}) ~ 'ranking' ~ player.id %}
        const eventSourceRanking = new EventSource("{{ mercure(rankingPath)|escape('js') }}");
        eventSourceRanking.onmessage = event => {
            const ranking = document.getElementById('ranking');
            ranking.innerHTML = event.data;
        }
    </script>

    {# MAIN BOARD MANAGEMENT #}
    <script>
        {% set mainBoardPath = path('app_game_show_myr', {'id': game.id}) ~ 'mainBoard' ~ player.id %}
        const eventSourceMainBoard = new EventSource("{{ mercure(mainBoardPath)|escape('js') }}");
        eventSourceMainBoard.onmessage = event => {
            updateMainBoardAndDisplayPheromoneBorders(event.data)
        }
    </script>

    {# MAIN BOARD CLOSURE MANAGEMENT #}
    <script>
        function closeWindow() {
            let personalBoard = document.getElementById('personalBoard');
            personalBoard.remove();
        }
        function closeSelectedBoxWindow(unselectTile = true) {
            let selectedBoxActions = document.getElementById('selectedBoxActions');
            if(selectedBoxActions !== null) {
                let tile = document.getElementsByClassName("displayedActionsTile").item(0);
                if (tile != null && unselectTile) {
                    tile.classList.value = "";
                    tile.classList.add("fill-[rgba(0,_0,_0,_0)]")
                }
                selectedBoxActions.remove();
            }
        }
        function closeThrowResourceActions() {
            let throwResourceActions = document.getElementById('throwResourceActions');
            throwResourceActions.remove();
        }
        function closeObjectivesWindow() {
            let objectives = document.getElementById('objectives');
            if (objectives != null) {
                objectives.remove();
                document.getElementById('objectives_button').removeAttribute('disabled');
                if (window.currentTileMode === 3) {
                    document.querySelectorAll('.selectedPheromoneTile').forEach(element => {
                        element.classList.remove('selectedPheromoneTile');
                    })
                }
                window.currentTileMode = 1;
            }
        }
    </script>

    {# NOTIFICATION MANAGEMENT #}
    <div class="hidden drop-shadow-2xl"></div>
    <script>
        {% set path = path('app_game_show_myr', {'id': game.id}) ~ 'highlight' ~ player.id %}
        const eventSourceHighlight = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceHighlight.onmessage = event => {
                let tile = document.getElementById(event.data + "-clickable-zone").firstElementChild;
                tile.classList.value = "";
                tile.classList.add("fill-[rgba(255,_255,_255,_0.35)]")
                tile.classList.add("displayedActionsTile")
        }

        {% if isSpectator %}
        {% set path = path('app_game_show_myr', {'id': game.id}) ~ 'notification' %}
        {% else %}
        {% set path = path('app_game_show_myr', {'id': game.id}) ~ 'notification' ~ player.username %}
        {% endif %}

        const eventSourceNotification = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceNotification.onmessage = event => {
            let data = event.data.split('_');
            if (data.length >= 5 ) {
                new GameNotification(Number(data[0]), data[1], data[2], data[3], data[4]);
            }
        }

    </script>

    {# TILE POSITIONING MANAGEMENT #}
    <script>
        window.clickableTilesForPlacement = [];

        function PrepareTilePositioning(id) {
            window.selectedOrientation = id;
            document.getElementById('selectObjectTitle').innerText = "Placement de la tuile"

            let divTemplate = document.getElementById('PrepareTilePositioningTemplate');
            let divClone = divTemplate.cloneNode(true)
            divClone.id = 'PrepareTilePositioning';

            let selectedRotationimage = document.getElementById('ObjectOrientation_' + id).cloneNode(true);

            divClone.querySelector("#imageDiv").appendChild(selectedRotationimage.firstElementChild);

            document.getElementById('ObjectSelectionList').parentElement.appendChild(divClone)
            document.getElementById('ObjectOrientationList').classList.add('hidden')
        }

        function selectOrientationTile(objectId, nbRotation) {
            window.selectedObjectId = objectId;
            let divTemplate = document.getElementById('ObjectOrientationListTemplate');
            let divClone = divTemplate.cloneNode(true)
            divClone.id = 'ObjectOrientationList';

            let buttonTemplate = document.getElementById('ObjectOrientationTemplate');

            let objectImage = document.getElementById('objectImage_' + objectId);

            let flipCpt = 1;
            if (objectId === "4") {
                flipCpt = 2;
                nbRotation = 6
            }

            for (let j = 0; j < flipCpt; j++) {
                let newScr = j === 0 ? objectImage.dataset.firstOrientationSrc : objectImage.dataset.flipOrientationSrc
                let flipGap = nbRotation * j;
                for (let i = 0; i < nbRotation; i++) {
                    let button = buttonTemplate.cloneNode(true);
                    button.id = `ObjectOrientation_${i + flipGap}`;
                    button.setAttribute("data-myrmes-tileid-param", objectId);
                    button.setAttribute("data-myrmes-orientation-param", i + flipGap);
                    let image = objectImage.cloneNode(true);
                    image.src = newScr;
                    image.style.transform = `rotate(${(360 / nbRotation) * i}deg)`;
                    button.appendChild(image);
                    divClone.appendChild(button);
                }
            }

            document.getElementById('selectObjectTitle').innerText = "Orientation de la tuile"
            document.getElementById('ObjectSelectionList').parentElement.appendChild(divClone)
            document.getElementById('ObjectSelectionList').classList.add('hidden')
        }

        {# INTERACTIVE GOALS MANAGEMENT #}

        window.goalNeededResources = 0;

        /**
         * updateOtherRange: used only for the stone or dirt goal to update the value of the other range input
         * @param range
         */
        function updateOtherRange(range) {
            const stoneRange = document.getElementById("stone-range");
            const dirtRange = document.getElementById("dirt-range");
            const stoneQuantitySelected = document.getElementById("stoneQuantitySelected");
            const dirtQuantitySelected = document.getElementById("dirtQuantitySelected");
            const otherRange = range === stoneRange ? dirtRange : stoneRange;
            const totalQuantityNeeded = range.parentNode.parentElement.dataset.totalQuantityNeeded;

            otherRange.value = totalQuantityNeeded - parseInt(range.value);

            stoneQuantitySelected.textContent = stoneRange.value;
            dirtQuantitySelected.textContent = dirtRange.value;
        }

        /**
         * initTilesSelectionForGoal: initialize variables for pheromones / special tile goal
         * @param tilesOwned
         * @param neededResources
         */
        function initTilesSelectionForGoal(tilesOwned, neededResources) {
            window.currentTileMode = 3;
            window.goalNeededResources = neededResources;
            window.goalPheromonesSelected = [];
            window.goalTilesOwned = {};

            tilesOwned.split('___').forEach(value => {
                let valueSplit = value.split('__');
                window.goalTilesOwned[valueSplit[0]] = valueSplit[1].split('_');
            });
        }

        /**
         * getOwnedPheromoneIdFromBoardBoxTileId: return the id (key) of the pheromone from the id of one of his tile
         * @param BoardBoxTileId
         * @returns {string|null}
         */
        function getOwnedPheromoneIdFromBoardBoxTileId(BoardBoxTileId) {
            const entries = Object.entries(window.goalTilesOwned);
            for (let [key, value] of entries) {
                if (value.includes(BoardBoxTileId.toString())) {
                    return key;
                }
            }
            return null;
        }

        /**
         * updateGoalMenuData: update information on the goal menu and change the state of the validation button
         */
        function updateGoalMenuData() {
            document.getElementById('TileSelectionLeft').textContent =
                    `${window.goalNeededResources - window.goalPheromonesSelected.length}`;

            if (window.goalNeededResources - window.goalPheromonesSelected.length === 0) {
                document.getElementById('PheromoneAndSpecialTileValidation').removeAttribute('disabled');
            } else {
                document.getElementById('PheromoneAndSpecialTileValidation').setAttribute('disabled', '');
            }
        }

        /**
         * pheromoneSelectedForGoal: add / remove a pheromone from the selected list for the goal
         * @param pheromoneId
         */
        function pheromoneSelectedForGoal(pheromoneId) {
            let pheromoneIdIndex= window.goalPheromonesSelected.indexOf(pheromoneId);
            if (pheromoneIdIndex !== -1) {
                window.goalTilesOwned[pheromoneId].forEach(value => {
                    let tileElement = document.getElementById(`${value}-clickable-zone`)
                    tileElement.parentElement.classList.remove('selectedPheromoneTile');
                });
                window.goalPheromonesSelected.splice(pheromoneIdIndex, 1);
            } else if (window.goalPheromonesSelected.length < window.goalNeededResources){
                window.goalTilesOwned[pheromoneId].forEach(value => {
                    let tileElement = document.getElementById(`${value}-clickable-zone`)
                    tileElement.parentElement.classList.add('selectedPheromoneTile');
                });
                window.goalPheromonesSelected.push(pheromoneId);
            }
            updateGoalMenuData();
        }

    </script>

    {% if game.gamePhase == PHASE_WORKER %}
        <script>
            initQueue("{{ path('app_game_show_myr',
                {
                    id: game.id
                }) }}",
                    {{ player.personalBoardMYR.warriorsCount }},
                    {{ player.personalBoardMYR.playerResourceMYRs|filter(
                        resource => resource.resource.description == RESOURCE_DIRT
                    )|first.quantity
                    }})
        </script>
    {% endif %}
{% endblock %}
