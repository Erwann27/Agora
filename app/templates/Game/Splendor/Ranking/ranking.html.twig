{#
    This section displays the ranking with a view of the other players' possessions
    @param : array colorsNames, array colors, array colorsTokens, array tokensNames, array prcards,
             int angleStep, array playerCardsColorsCount, array playerTokensColorsCount,
    @return : display the ranking of the game with public player information
#}

{#constants declaration#}

{#colors for player's buyed cards #}
{% set colorsNames = ["green","white","blue","black","red"] %}
{% set colors = [
    {"green": "009b77"},
    {"white": "ffffff"},
    {"blue": "0f52ba"},
    {"black": "0f0f0f"},
    {"red": "e0115f"}
] %}

{#colors for player's tokens#}
{% set colorsTokens = ["green","white","blue","black","red","yellow"] %}
{% set tokensNames = [
    {"green": "emeraldToken.png"},
    {"white": "diamondToken.png"},
    {"blue": "sapphireToken.png"},
    {"black": "onyxToken.png"},
    {"red": "rubyToken.png"},
    {"yellow": "goldToken.png"}
] %}

{#files for reserved cards#}
{% set prcards = [
    {"1": "reservedCardLvl1.svg"},
    {"2": "reservedCardLvl2.svg"},
    {"3": "reservedCardLvl3.svg"}
] %}

{#angles for reserved cards#}
{% set angleStep = 45 %}

{#splendor logo#}
<div id="logo" class="w-full h-[10%] landscape:1/6  lg:h-1/5 justify-center flex">
    <img class="" src="{{ asset('resourcesGames/Splendor/Images/splendorLogo.png') }}" alt="splendor logo">
</div>

{{ include('/Game/Splendor/Ranking/loadingRankingData.html.twig') }}

<div class="w-full h-[90%] inline-flex flex-col justify-start gap-[2vw] landscape:gap-[0.5vw] h-4/5 z-1 z-2 z-3">

    {% for p in ranking %}

        {#is p current player#}
        {% set isCurrentPlayer = p.username == player.username and not isSpectator %}

        {#player's cards#}
        {% set playerCards = p.personalBoard.playerCards %}

        {#player's number cards#}
        {% set playerCardsColors = playerCards|filter(c => c.isReserved == false)|map(c => c.developmentCard.color) %}
        {% set playerCardsColorsCount = [
            {"green": playerCardsColors|filter(c => c == "green")|length},
            {"white": playerCardsColors|filter(c => c == "white")|length},
            {"blue": playerCardsColors|filter(c => c == "blue")|length},
            {"black": playerCardsColors|filter(c => c == "black")|length},
            {"red": playerCardsColors|filter(c => c == "red")|length}
        ] %}

        {#player's reserved cards levels#}
        {% set playerReservedCardsLevel = playerCards|filter(c => c.isReserved)
            |map(c => c.developmentCard.level) %}

        {#player's tokens colors#}
        {% set playerTokensColors = p.personalBoard.tokens|map(t => t.color) %}
        {% set playerTokensColorsCount = [
            {"green": playerTokensColors|filter(c => c == "green")|length},
            {"white": playerTokensColors|filter(c => c == "white")|length},
            {"blue": playerTokensColors|filter(c => c == "blue")|length},
            {"black": playerTokensColors|filter(c => c == "black")|length},
            {"red": playerTokensColors|filter(c => c == "red")|length},
            {"yellow": playerTokensColors|filter(c => c == "yellow")|length}
        ] %}

        {#ranking box#}
        <div id="{{ p.username }}"
             class="bg-gradient-to-r from-[#707984ff] to-[#4C6E9Bff]
             border-solid border-[0.3vw] border-[#AC9424ff] rounded-[1vw] h-[15vw] landscape:h-[9vw]
             inline-flex flex-col justify-around landscape:justify-center p-[0.5vw]">

            {#player name and score#}
            <div class="inline-flex justify-between text-[2vw]  landscape:text-[1.5vw]">
                <p class="{% if isCurrentPlayer %}font-bold text-purple-800{% endif %} ">{{ p.username }}</p>
                <div class="inlineFlex gap-[0.5vw]">
                    <p>{{ p.score }}</p>
                    <img class="h-[2vw]" src="{{ asset('resourcesGames/utils/star.svg') }}" alt="splendor victory point icon">
                </div>
            </div>
            <div class="inline-flex justify-between ">

                {#player buyed cards count#}
                <div class="inlineFlex gap-[0.5vw]">
                    {% for color in colorsNames %}
                        <svg viewBox="0 0 80 100" class="h-[4vw] landscape:h-[2.5vw]">
                            <rect height="100" width="80" rx="25%" fill="#{{ colors|column(color)|first }}"/>
                            <text x="40" y="75" class="text-[450%]" fill="#c0c0c0" text-anchor="middle">
                                {{ playerCardsColorsCount|column(color)|first }}
                            </text>
                        </svg>
                    {% endfor %}
                </div>

                {#player reserved cards#}
                <div>
                    <svg viewBox="0 0 300 300" class="h-[4.5vw] landscape:h-[3vw]">
                        {% set i = 0 %}
                        {% for lvl in playerReservedCardsLevel %}
                            {% set c = prcards|column(lvl)|first %}
                            <image z="10" transform="rotate(-{{ i * angleStep }}, 220, 160)" x="150" y="0" height="180" width="131"
                                   href="{{ asset('resourcesGames/Splendor/Images/' ~ c) }} "/>
                            {% set i = i + 1 %}
                        {% endfor %}
                    </svg>
                </div>
            </div>

            {#player tokens#}
            <div class="inline-flex justify-start gap-[0.5vw]">
                {% for tokenColor in colorsTokens %}
                    <svg viewBox="0 0 250 250" class="h-[4vw] landscape:h-[3vw]">
                        <image x="0" y="25" height="200" width="200" href="{{ asset('resourcesGames/Splendor/Images/Tokens/' ~
                            tokensNames|column(tokenColor)|first) }}"/>
                        <circle cx="180" cy="60" r="60" fill="red" stroke="white" stroke-width="3"/>
                        <text text-anchor="middle" x="180" y="95" class="text-[600%] font-extrabold" fill="white">
                            {{ playerTokensColorsCount|column(tokenColor)|first }}
                        </text>
                    </svg>
                {% endfor %}
            </div>
        </div>
    {% endfor %}
</div>