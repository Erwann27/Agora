{% extends 'base.html.twig' %}

{% block title %}Agora - Splendor{% endblock %}

{% block body %}
    <div class="h-screen w-screen overflow-hidden absolute" {{ stimulus_controller('splendor') }}>
        <div id="animationContainer" class="hidden absolute top-0 left-0 w-full h-full bg-black bg-opacity-0 z-50"></div>
        <div id="index_splendor" class="h-full w-full overflow-hidden">
            {% block nav %}
                {{ include('/Game/Utils/navigation.html.twig') }}
            {% endblock %}
            {% block endGame %}
                    {{ include('/Game/Splendor/endGameScreenResult.html.twig') }}
            {% endblock %}
            {% block ranking %}
            <div id="ranking" class="absolute bg-gradient-to-b from-[#4C6E9Bff] to-[#20222Dff] w-[25%] h-full right-0">
                {{  include('/Game/Splendor/Ranking/ranking.html.twig') }}
            </div>
            {% endblock %}
                <div id="mainBoard" class="flow float-start w-[75%]
                        {% if isSpectator %}h-full pb-3{% else %}h-[84%]{% endif %}">
                    {{ include('/Game/Splendor/MainBoard/mainBoard.html.twig') }}
                </div>
            {% block personalBoard %}
                {% if not isSpectator %}
                <div class="flex bg-[#20222Dff] h-[16%] w-[75%] float-bottom-0" id="personalBoard">
                    {{ include('/Game/Splendor/PersonalBoard/personalBoard.html.twig') }}
                </div>
                {% endif %}
            {% endblock %}
            {% block chat %}
                {{ include('/Game/Utils/chat.html.twig') }}
            {% endblock %}
	        <div id="notificationsStorage" class="hidden">
		        {{ include('/Game/Splendor/componentStorage.html.twig') }}
	        </div>
	        <div id="notificationsContainer" class="absolute space-y-2 landscape:sm:w-[27%] portrait:w-[30%] landscape:lg:w-[20%] bottom-0 right-0 "></div>
        </div>
    </div>

    {# ANIMATION MANAGEMENT #}
    <script type="text/javascript" src="{{ asset('resourcesGames/utils/ingameNotification.js') }}"></script>
    <script type="text/javascript" src="{{ asset('resourcesGames/utils/animationQueue.js') }}"></script>
    <script type="text/javascript" src="{{ asset('resourcesGames/Splendor/animation.js') }}"></script>

    <script>
        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'token' ~ player.id %}
        const eventSourceTokens = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceTokens.onmessage = event => {
            animationQueue.addToQueue(() => {
                console.log("token");
                let mainBoard = document.getElementById('tokens');
                mainBoard.innerHTML = event.data;
                animationQueue.executeNextInQueue()
            })
        }

        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'developmentCards' ~ player.id %}
        const eventSourceDevelopmentCards = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceDevelopmentCards.onmessage = event => {
            animationQueue.addToQueue(() => {
                console.log("developmentCards");
                let mainBoard = document.getElementById('developmentCards');
                mainBoard.innerHTML = event.data;
                animationQueue.executeNextInQueue()
            })
        }

        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'nobleTiles' ~ 'player' %}
        const eventSourceNobleTiles = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceNobleTiles.onmessage = event => {
            animationQueue.addToQueue(() => {
                console.log("nobleTiles");
                let mainBoard = document.getElementById('nobleTiles');
                mainBoard.innerHTML = event.data;
                animationQueue.executeNextInQueue()
            })
        }

        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'reservedCards' ~ player.id %}
        const eventSourceReservedCards = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceReservedCards.onmessage = event => {
            animationQueue.addToQueue(() => {
                console.log("reservedCards");
                let mainBoard = document.getElementById('reservedCards');
                mainBoard.innerHTML = event.data;
                animationQueue.executeNextInQueue()
            })
        }

        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'ranking' %}
        const eventSourceRanking = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceRanking.onmessage = event => {
            animationQueue.addToQueue(() => {
                console.log("ranking");
                let ranking = document.getElementById('ranking');
                ranking.innerHTML = event.data;
                animationQueue.executeNextInQueue()
            })
        }

        {% if needToPlay %}
        alert("It's your turn to play ! " +
            "Buy or reserve a card, or take 2 same color tokens, or even 3 different colors tokens !");
        {% endif %}
    </script>

    {# TAKEN TOKENS MANAGEMENT#}
    <script>
        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'animTakenTokens' %}
        const eventSourceTakenTokens = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceTakenTokens.onmessage = event => {
            animationQueue.addToQueue(() => {
                console.log("animTakenTokens");
                let username = event.data.split('__')[0];
                let tokens = event.data.split('__')[1].split('_');
                console.log(event.data)
                console.log(username)
                console.log(tokens)
                setTimeout(() => {
                    const rowsAnimations = tokens.map(token => moveTakingToken(token, username));
                    Promise.all(rowsAnimations).then(() => animationQueue.executeNextInQueue());
                }, 2000);
            })
        }
    </script>

    {# TAKEN CARD MANAGEMENT#}
    <script>
        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'animTakenCard' %}
        const eventSourceTakenCard = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceTakenCard.onmessage = event => {
            animationQueue.addToQueue(() => {
                console.log("animTakenCard");
                let username = event.data.split('__')[0];
                let devCard = event.data.split('__')[1];

                moveDevCard(devCard, username);
            })
        }
    </script>

    {# TAKEN CARD FROM DRAW MANAGEMENT#}
    <script>
        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'animTakenCardFromDraw' %}
        const eventSourceTakenCardFromDraw = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceTakenCardFromDraw.onmessage = event => {
            animationQueue.addToQueue(() => {
                console.log("animTakenCardFromDraw");
                let drawLevel = event.data.split('__')[0];
                let devCard = event.data.split('__')[1];

                console.log(drawLevel, devCard)

                const movesAnimations = [moveDrawToDevCard(drawLevel, devCard, 'landscape'),];
                    //moveDrawToDevCard(drawLevel, devCard, 'portrait')];

                Promise.all(movesAnimations).then(() => animationQueue.executeNextInQueue());
            })
        }
    </script>

    {# RETURNED TOKENS MANAGEMENT#}
    <script>
        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'animReturnedTokens' %}
        const eventSourceReturnedTokens = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceReturnedTokens.onmessage = event => {
            animationQueue.addToQueue(() => {
                console.log("animReturnedTokens");
                let username = event.data.split('__')[0];
                let tokens = event.data.split('__')[1].split('_');
                setTimeout(() => {
                    const movesAnimations = tokens.map(token => moveReturnedToken(token, username));
                    Promise.all(movesAnimations).then(() => animationQueue.executeNextInQueue());
                }, 2000);
            })
        }
    </script>

    {# MOVING NOBLE MANAGEMENT#}
    <script>
        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'animNoble' %}
        const eventSourceNobleMove = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceNobleMove.onmessage = event => {
            animationQueue.addToQueue(() => {
                console.log("animNoble");
                let username = event.data.split('__')[0];
                let nobles = event.data.split('__')[1].split('_');
                setTimeout(() => {
                    const movesAnimations = nobles.map(noble => moveNobleTile(noble, username));
                    Promise.all(movesAnimations).then(() => animationQueue.executeNextInQueue());
                }, 2000);
            })
        }
    </script>

    <script>
        function closeWindow() {
            let window = document.getElementById('selectedCardActions');
            window.remove();
        }
    </script>

    {# END OF GAME MANAGEMENT #}
    <script>

        {% set path = path('app_game_show_spl', {'id': game.id}) ~ 'endOfGame' %}
        const eventSourceEndOfGame = new EventSource("{{ mercure(path)|escape('js') }}");
        eventSourceEndOfGame.onmessage = event => {
            animationQueue.addToQueue(() => {
                gameFinished(event.data, "{{ not isSpectator ? player.username }}")
                animationQueue.executeNextInQueue()
            })
        }

        {% if isGameFinished %}
            {% set winner = null %}
            {# Arbitrary value impossible to reach  #}
            {% set winnerScore = 0 %}
            {% for player in game.players %}
                {% if player.totalPoints > winnerScore %}
                    {% set winnerScore = player.totalPoints %}
                    {% set winner = player.username %}
                {% elseif player.totalPoints == winnerScore %}
                    {% set winner = null %}
                {% endif %}
            {% endfor %}
            gameFinished("{{ winner }}", "{{ not isSpectator ? player.username }}")
        {% endif %}

    </script>
{% endblock %}
