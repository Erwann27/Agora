{% extends 'platform/dashboard/layout.html.twig' %}
{% block title %}
Création d'une table
{% endblock %}
{% block content %}
<div class="relative isolate px-6 pt-14 lg:px-8">
   <div class="absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80" aria-hidden="true">
      <div class="relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-danger to-primary opacity-30 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]" style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)"></div>
   </div>
   <div class="space-y-12 lg:mr-20">
      {{ form_start(form) }}
      <div class="mt-10 grid grid-cols-3 gap-x-6 gap-y-8 ">
         <div class="relative isolate flex flex-col justify-end overflow-hidden rounded-2xl bg-gray-900 px-8 pb-8 pt-80 sm:pt-48 lg:pt-80 max-w-xs xl:col-span-1 col-span-3 row-span-2 mx-auto">
            <img src="{{ asset(game.getImgURL) }}" alt="{{ game.name }} icon" class="absolute inset-0 -z-10 h-full w-full object-cover">
            <div class="absolute inset-0 -z-10 bg-gradient-to-t from-gray-900 via-gray-900/40"></div>
            <div class="absolute inset-0 -z-10 rounded-2xl ring-1 ring-inset ring-gray-900/10"></div>
            <h3 class=" text-lg font-semibold leading-6 text-white">
               Nouvelle Table -
               {{ game.name }}
            </h3>
         </div>
         <div class="xl:col-span-1 col-span-3">
            {{ form_label(form.nbUserMax, 'Nombre de joueur', { 'label_attr': {
            'class': 'block text-sm font-medium leading-6 text-gray-900'
            }}) }}
            <p class="block text-sm font-medium leading-6 text-gray-600">de
               {{ game.getMinPlayers }}
               à
               {{ game.getMaxPlayers }}
               joueurs
            </p>
            <div class="mt-2">
               {{ form_widget(form.nbUserMax, {'id': 'nbUsers', 'attr': {
               'class': 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6'
               }}) }}
            </div>
         </div>
         <div class="flex flex-col h-[500px] border-2 row-span-3 xl:col-span-1 col-span-3">
            {{ form_label(form.invitedContacts, 'Joueurs à inviter', {'label_attr': {
               'class': 'block text-center mt-2 text-md font-medium leading-6 text-gray-900'
            }}) }}
            <div class="relative flex justify-center gap-x-3">
               <div class="text-sm leading-6">
                  <label for="filter" class="font-medium text-gray-900">contacts uniquement</label>
               </div>
               <div class="flex h-6 items-center">
                  <input id="filter" name="filter" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary">
               </div>
            </div>
            <div class="border-b-2 py-2 px-2">
               <input type="text" id="contactSearchInput" placeholder="Chercher un contact" class="py-2 px-2 border-2 border-gray-200 rounded-2xl w-full"/>
            </div>
            <ul id="contactList" class="overflow-auto">
               {% set contacts = app.user.getContacts() %}
               {% for user in allUsers %}
                  <li id="{{ user.getUsername() }}_li" class="{% if user in contacts %}contact{% endif %} cursor-pointer">
                     <div class="group relative flex items-center px-5 py-6 hover:bg-gray-100 hover:text-gray-900">
                        <div class="relative flex min-w-0 flex-1 items-center">
                           <span class="relative inline-block flex-shrink-0">
                              <img src="https://avatarfiles.alphacoders.com/244/thumb-244471.png" alt="Avatar de générique" class="object-cover h-10 w-10 rounded-full"/>
                           </span>
                           <div class="ml-4 truncate">
                              <p class="truncate text-sm font-medium text-gray-900">{{ user.getUsername() }}</p>
                           </div>
                        </div>
                     </div>
                  </li>
               {% endfor %}
            </ul>
            <div id="noContact" class="hidden px-5 py-6 ml-4 truncate">
               <p class="truncate text-sm font-medium text-gray-900">Aucun contact trouvé</p>
            </div>
         </div>
         <div class="xl:col-span-1 col-span-3">
            <label for="inactivity" class="block text-sm font-medium leading-6 text-gray-900">Temps d'inactivité</label>
            <p class="block text-sm font-medium leading-6 text-gray-600">Permet de définir le temps de jeu max avant l'expulsion du joueur (de 24 à 168 heures).</p>
            <div class="relative mt-2 rounded-md shadow-sm">
               {{ form_widget(form.inactivityHours, {'attr': {
               'class': 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6'
               }}) }}
            </div>
         </div>
         <div class="xl:col-span-2 col-span-3 block w-full rounded-md border-0 p-3 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6">
            <p class="block text-sm font-medium leading-6 text-gray-900">Contacts Invités</p>
            {{ form_widget(form.invitedContacts, { 'id': 'invitedContacts','attr': {
               'class': 'grid grid-cols-8'
            }}) }}
         </div>
         <div class="mt-16 col-span-3">
            <div class="flex justify-center space-x-4">
               <button type="button" onclick="window.history.back();" class="text-white bg-red-500 hover:bg-red-400 focus:ring-4 focus:outline-none focus:ring-red-300 font-semibold rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2">
                  Retour
               </button>
               <button type="submit" class="text-white bg-primary hover:bg-blue-400 focus:ring-4 focus:outline-none focus:ring-blue-300 font-semibold rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2">
                  Créer une table
               </button>
            </div>
         </div>
         <div class="hidden">
            {{ form_rest(form) }}
         </div>
      </div>
      {{ form_end(form) }}

      <div class="absolute inset-x-0 top-[calc(100%-13rem)] -z-10 transform-gpu overflow-hidden blur-3xl sm:top-[calc(100%-30rem)]" aria-hidden="true">
         <div class="relative left-[calc(50%+3rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 bg-gradient-to-tr from-primary to-danger opacity-30 sm:left-[calc(50%+36rem)] sm:w-[72.1875rem]" style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)"></div>
      </div>
   </div>
</div>
<script>
   const nbUsers = document.getElementById('nbUsers');
   const invitedContacts = document.getElementById('invitedContacts');
   const contactListRoot = document.getElementById("contactList");

   // init checkboxes and label
   const checkboxes = invitedContacts.querySelectorAll('input[type="checkbox"]');
   const labels = invitedContacts.querySelectorAll('label');

   for (let i = 0; i < labels.length; i++ ){
      // init
      labels[i].classList.add("cursor-pointer");
      labels[i].classList.add("truncate");
      labels[i].classList.add("mx-2");
      checkboxes[i].classList.add("hidden");
      checkboxes[i].addEventListener('change', function () {
         labels[i].classList.add("hidden");
      });
      resetInvitedContacts();

      // contact list
      let li = document.getElementById(labels[i].textContent + "_li");
      li.addEventListener("click", function() {
         if (!checkboxes[i].checked && checkNbOfInvitedContacts()) {
            checkboxes[i].checked = true;
            labels[i].classList.remove("hidden");
         } else {
            checkboxes[i].checked = false;
            labels[i].classList.add("hidden");
         }
      });
   }

   // Reset event
   nbUsers.addEventListener('change', resetInvitedContacts);

   // filter list event
   const filterInput = document.getElementById('filter');

   filterInput.addEventListener('change', filterList)

   // Contact list event
   const contactSearchInput = document.getElementById('contactSearchInput');
   const noContact = document.getElementById('noContact');

   contactSearchInput.addEventListener('input', filterList);

   //reset all choices for the invited contacts when changing the nb of players
   function resetInvitedContacts(){
      checkboxes.forEach(function(checkbox){
         checkbox.checked = false;
      });
      labels.forEach(function(label){
         label.classList.add("hidden");
      });
   }

   //limits the number of checks in the contact list, depending on the value of "number of players"
   function checkNbOfInvitedContacts()
   {
      let nbOfChecks = 0;
      for (let i = 0; i < checkboxes.length; i++ ){
         if (checkboxes[i].checked){
            nbOfChecks++;
         }
      }
      console.log(nbOfChecks !== (parseInt(nbUsers.value) - 1));
      return nbOfChecks !== (parseInt(nbUsers.value) - 1);
   }

   //filter contact list
   function filterList() {
      const search = contactSearchInput.value.toLowerCase();
      console.log(search);
      noContact.classList.add('hidden');
      let empty = true;

      for (let item of contactListRoot.querySelectorAll('li')) {
         const text = item.querySelector("p").textContent.toLowerCase();
         if (text.includes(search) && (!filterInput.checked || item.classList.contains("contact"))) {
            empty = false;
            item.classList.remove('hidden'); // Afficher l'élément si le texte correspond à la recherche
         } else {
            item.classList.add('hidden'); // Masquer l'élément sinon
         }
      }
      if (empty) {
         noContact.classList.remove('hidden');
      }
   }
</script>
{% endblock %}