{#
This section displays the game's name, and the current game's timer and leaderboard

@param :    users       -> Player entities who play in this game
		    currentUser -> the Player entity of the session's user
		    createdAt   -> The number of seconds since the Unix Epoch when the game started

@return :   display game's informations and leaderboard
#}

<div class="flex flex-col absolute bg-violet-100 w-1/6 right-0 max-h-screen">
	<div>
		<img src="{{ asset('resourcesGames/6QP/logo.png') }}" alt="logo" class="rounded-full mr-2">
		<p id="elapsedTime" class="mr-1 text-center md:text-base portrait:text-xl md:text-xl">
			00:00:00
		</p>
		{#
		<span class="mr-1 text-center text-sm md:text-xs lg:text-lg xl:text-xl">{{ playersNumber }} joueurs</span>
		<span class="mr-1 text-center text-sm md:text-xs lg:text-lg xl:text-xl">
			Créée le {{ createdAt|date('d/m/Y H:i') }}
		</span>
		#}
	</div>
	<p class="text-center py-2 font-bold dark:bg-gray-700 text-white text-xl border-y-4 border-violet-600">
		Classement
	</p>
	<div class="dark:bg-slate-400 overflow-y-auto">
		<div id="leaderboard" class="text-sm font-medium space-y-1 text-white">
			{% for user in users %}
				<div id="{{ user[0] }}" class="score-white">
					<div id="l_{{ user[0] }}_points" class="portrait:hidden flex w-full items-center overflow-hidden"
					     data-score="{{ user[1] }}">
						<img src="{{ asset('resourcesGames/6QP/teteDeBoeuf.svg') }}" alt="logo"
						     class="lg:size-8 md:size-4 mr-1">
						<p class="mr-1 lg:text-xl font-bold">
							{{ user[1] }}
						</p>
						<p class="mr-2 text-sm font-thin">
							{{ user[1] > 1 ? 'points' : 'point' }}
						</p>
						{% if currentUser == user[0] %}
							<p class="flex-grow text-clip text-right sm:text-xs text-violet-300">{{ user[0] }}</p>
						{% else %}
							<p class="flex-grow text-clip text-right sm:text-xs">{{ user[0] }}</p>
						{% endif %}
					</div>

					<div class="landscape:hidden w-full items-center overflow-hidden">
						{% if currentUser == user[0] %}
							<p class=" flex items-center text-clip text-right mb-2 text-xl text-violet-300">{{ user[0] }}</p>
						{% else %}
							<p class="flex items-center text-clip text-right mb-2 text-xl">{{ user[0] }}</p>
						{% endif %}

						<div id="p_{{ user[0] }}_points" class="flex">
							<img src="{{ asset('resourcesGames/6QP/teteDeBoeuf.svg') }}" alt="logo"
							     class="size-8  mr-1">
							<p class="mr-1 text-xl font-bold">
								{{ user[1] }}
							</p>
							<p class="mr-2 font-thin text-sm">
								{{ user[1] > 1 ? 'points' : 'point' }}
							</p>
						</div>
					</div>
				</div>
			{% endfor %}
		</div>
	</div>
</div>
<script>
    function updateElapsedTime() {
        const currentTime = Math.floor(Date.now() / 1000);
        const elapsedTime = currentTime - {{ createdAt }};

        const hours = Math.floor(elapsedTime / 3600);
        const minutes = Math.floor((elapsedTime % 3600) / 60);
        const seconds = elapsedTime % 60;

        document.getElementById('elapsedTime').innerText = hours.toString().padStart(2, '0') + ':' +
            minutes.toString().padStart(2, '0') + ':' +
            seconds.toString().padStart(2, '0');
    }

    setInterval(updateElapsedTime, 1000);

    function updateUserScore(user) {
        let scoreElement = document.getElementById(user[0]);
        if (scoreElement) {
            let landscapeScore = document.getElementById('l_' + user[0] + '_points');
            landscapeScore.dataset.score = user[1];
            if (landscapeScore) {
                landscapeScore.getElementsByTagName('p').item(0).innerText = user[1];
                if (user[1] > 1) {
                    landscapeScore.getElementsByTagName('p').item(1).innerText = "points";
                }
            }


            let portraitScore = document.getElementById('p_' + user[0] + '_points');
            if (portraitScore) {
                portraitScore.getElementsByTagName('p').item(0).innerText = user[1];
                if (user[1] > 1) {
                    portraitScore.getElementsByTagName('p').item(1).innerText = 'points';
                }
            }
        }
        updateLeaderboard();
    }

    function updateLeaderboard() {
        let leaderboardContainer = document.getElementById('leaderboard');
        if (leaderboardContainer) {
            let leaderboardItems = Array.from(leaderboardContainer.children);

            leaderboardItems.sort(function (a, b) {
                let scoreA = parseInt(document.getElementById('l_' + a.id + '_points').dataset.score);
                let scoreB = parseInt(document.getElementById('l_' + b.id + '_points').dataset.score);
                return scoreA - scoreB;
            });

            let first = document.getElementById(
                'l_' + leaderboardItems[0].id + '_points').dataset.score;
            let last = document.getElementById('l_' +
                leaderboardItems[leaderboardItems.length - 1].id + '_points').dataset.score;

            leaderboardItems.forEach((item) => {
                if (document.getElementById('l_' + item.id + '_points').dataset.score === last) {
                    item.classList.remove('score-white', 'score-gold');
                    item.classList.add('score-red');
                } else if (document.getElementById('l_' + item.id + '_points').dataset.score === first) {
                    item.classList.remove('score-red', 'score-white');
                    item.classList.add('score-gold');
                } else {
                    item.classList.remove('score-red', 'score-gold');
                    item.classList.add('score-white');
                }
            });

            leaderboardItems.forEach(item => leaderboardContainer.removeChild(item));
            leaderboardItems.forEach(item => leaderboardContainer.appendChild(item));
        }
    }

    updateLeaderboard();
    /*
    setTimeout(() => {
        updateUserScore(['user2', '100']);
    }, 5000);
    setTimeout(() => {
        updateUserScore(['user4', '5']);
    }, 10000);
     */
</script>
