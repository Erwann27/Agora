version: '3'

services:
  reverse-proxy:
    # The official v2 Traefik image
    image: traefik:v2.10
    container_name: reverse_proxy
    command:
      - --api.insecure=true
      - --providers.docker
    ports:
      - '80:80'
      - '443:443'
      # The Web UI (enabled by --api.insecure=true)
      - '8080:8080'
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/:/etc/traefik
    depends_on:
      - jaeger

  agora:
    container_name: agora
    image: agora-boilerplate:latest
    ports:
      - '9000'
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./logs/symfony:/var/www/agora/var/log
    depends_on:
      database:
        condition: service_healthy
      database_test:
        condition: service_healthy
    environment:
      SERVER_NAME: ${SERVER_NAME:-localhost}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,reverse_proxy,REMOTE_ADDR}
    labels:
      traefik.http.routers.agora.rule: Host(`agora.docker.localhost`)
      co.elastic.metrics/enabled: "true"
      co.elastic.metrics/module: agora
      co.elastic.metrics/metricsets: docker
      co.elastic.metrics/hosts: '$${data.host}:9000'
      co.elastic.metrics/period: 10s


  caddy:
    image: caddy:2-alpine
    container_name: caddy
    volumes:
      - ./Caddyfile/:/etc/caddy/Caddyfile
      - ./:/var/www/agora
      - ./logs/caddy:/var/log/caddy
    ports:
      - '7070'
    depends_on:
      - agora
    labels:
      traefik.http.routers.caddy.rule: Host(`caddy.docker.localhost`)
      co.elastic.metrics/module: caddy
      co.elastic.metrics/metricsets: docker
      co.elastic.metrics/hosts: '$${data.host}:7070'
      co.elastic.metrics/period: 10s

###> doctrine/doctrine-bundle ###
  database:
    container_name: database
    image: 'mariadb:10.11.2'
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: main
    ports:
      # To allow the host machine to access the ports below, modify the lines below.
      # For example, to allow the host to connect to port 3306 on the container, you would change
      # "3306" to "3306:3306". Where the first port is exposed to the host and the second is the container port.
      # See https://docs.docker.com/compose/compose-file/compose-file-v3/#ports for more information.
      - '3306'
    healthcheck:
      test: [ "CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-ppassword' ]
      timeout: 2s
      retries: 5
###< doctrine/doctrine-bundle ###

  database_test:
    container_name: database_test
    image: 'mariadb:10.11.2'
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_TCP_PORT: 3307
      MYSQL_DATABASE: main_test
    ports:
      - '3307'
    healthcheck:
      test: [ "CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-ppassword' ]
      timeout: 2s
      retries: 5

###> symfony/mercure-bundle ###
  mercure:
    container_name: mercure
    image: dunglas/mercure
    environment:
      SERVER_NAME: ':80'
      MERCURE_PUBLISHER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
      MERCURE_SUBSCRIBER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
      # Set the URL of your Symfony project (without trailing slash!) as value of the cors_origins directive
      MERCURE_EXTRA_DIRECTIVES: |
        cors_origins *
        anonymous
        ui
    volumes:
      - ./mercure/Caddyfile/:/etc/caddy/Caddyfile
      - ./logs/mercure:/var/log/mercure
    ports:
      - "80"
    labels:
      traefik.http.routers.mercure.rule: Host(`mercure.docker.localhost`)
      co.elastic.metrics/module: mercure
      co.elastic.metrics/metricsets: docker
      co.elastic.metrics/hosts: '$${data.host}:80'
      co.elastic.metrics/period: 10s
###< symfony/mercure-bundle ###

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.54
    ports:
      - "5575:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    labels:
      traefik.http.routers.jaeger.rule: Host(`jaeger.docker.localhost`)
      traefik.http.routers.jaeger.entrypoints: web
      traefik.http.routers.jaeger.service: jaeger
      traefik.http.services.jaeger.loadbalancer.server.port: 16686

  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    labels:
      traefik.http.routers.prometheus.rule: Host(`prometheus.localhost`)
      traefik.http.routers.prometheus.service: prometheus
      traefik.http.services.prometheus.loadbalancer.server.port: 9090

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    environment:
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    labels:
      traefik.http.routers.grafana.rule: Host(`grafana.localhost`)
      traefik.http.routers.grafana.service: grafana
      traefik.http.services.grafana.loadbalancer.server.port: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./grafana/dashboards/json:/var/lib/grafana/dashboards


  logstash:
    container_name: logstash
    image: logstash:8.12.1
    depends_on:
      - elasticsearch
    volumes:
      - ./logs/symfony:/var/log/symfony
      - ./logs/caddy:/var/log/caddy
      - ./logs/mercure:/var/log/mercure
      - ./logs/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs/logstash/conf.d:/etc/logstash/conf.d
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      log.level: error

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.12.1
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.security.transport.ssl.enabled: false
      logger.level: error
      network.host: 0.0.0.0
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 3
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"

  kibana:
    container_name: kibana
    image: kibana:8.12.1
    depends_on:
      - elasticsearch
    ports:
      - "81:5601"
    environment:
      elasticsearch.ssl.verificationMode: "none"


  metricbeat:
    image: docker.elastic.co/beats/metricbeat:8.12.1
    container_name: metricbeat
    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/metricbeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      ELASTIC_PASSWORD: changeme
      ELASTICSEARCH_HOSTS: http://elastic:changeme@elasticsearch:9200
    depends_on:
      - elasticsearch
      - kibana