version: '3.8'

services:

  #BASIC AGORA CONFIGURATION

  reverse-proxy:
    # The official v2 Traefik image
    image: traefik:v2.10
    container_name: reverse_proxy
    command:
      - --api.insecure=true
      - --providers.docker
    ports:
      - '80:80'
      - '443:443'
      # The Web UI (enabled by --api.insecure=true)
      - '8080:8080'
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/:/etc/traefik
    depends_on:
      - jaeger

  agora:
    container_name: agora
    image: agora-boilerplate:latest
    ports:
      - '9000'
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./logs/symfony:/var/www/agora/var/log
    depends_on:
      database:
        condition: service_healthy
      database_test:
        condition: service_healthy
    environment:
      SERVER_NAME: ${SERVER_NAME:-localhost}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,reverse_proxy,REMOTE_ADDR}
    labels:
      traefik.http.routers.agora.rule: Host(`agora.docker.localhost`)
      co.elastic.metrics/enabled: "true"
      co.elastic.metrics/module: agora
      co.elastic.metrics/metricsets: docker
      co.elastic.metrics/hosts: '$${data.host}:9000'
      co.elastic.metrics/period: 10s
      co.elastic.logs/module: agora
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error


  caddy:
    image: caddy:2-alpine
    container_name: caddy
    volumes:
      - ./Caddyfile/:/etc/caddy/Caddyfile
      - ./:/var/www/agora
      - ./logs/caddy:/var/log/caddy
    ports:
      - '7070'
    depends_on:
      - agora
    labels:
      traefik.http.routers.caddy.rule: Host(`caddy.docker.localhost`)
      co.elastic.metrics/module: caddy
      co.elastic.metrics/metricsets: docker
      co.elastic.metrics/hosts: '$${data.host}:7070'
      co.elastic.metrics/period: 10s
      co.elastic.logs/module: caddy
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error

###> doctrine/doctrine-bundle ###
  database:
    container_name: database
    image: 'mariadb:10.11.2'
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: main
    ports:
      # To allow the host machine to access the ports below, modify the lines below.
      # For example, to allow the host to connect to port 3306 on the container, you would change
      # "3306" to "3306:3306". Where the first port is exposed to the host and the second is the container port.
      # See https://docs.docker.com/compose/compose-file/compose-file-v3/#ports for more information.
      - '3306'
    healthcheck:
      test: [ "CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-ppassword' ]
      timeout: 2s
      retries: 5
###< doctrine/doctrine-bundle ###

  database_test:
    container_name: database_test
    image: 'mariadb:10.11.2'
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_TCP_PORT: 3307
      MYSQL_DATABASE: main_test
    ports:
      - '3307'
    healthcheck:
      test: [ "CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-ppassword' ]
      timeout: 2s
      retries: 5

###> symfony/mercure-bundle ###
  mercure:
    container_name: mercure
    image: dunglas/mercure
    environment:
      SERVER_NAME: ':80'
      MERCURE_PUBLISHER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
      MERCURE_SUBSCRIBER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
      # Set the URL of your Symfony project (without trailing slash!) as value of the cors_origins directive
      MERCURE_EXTRA_DIRECTIVES: |
        cors_origins *
        anonymous
        ui
    volumes:
      - ./mercure/Caddyfile/:/etc/caddy/Caddyfile
      - ./logs/mercure:/var/log/mercure
    ports:
      - "80"
    labels:
      traefik.http.routers.mercure.rule: Host(`mercure.docker.localhost`)
      co.elastic.metrics/module: mercure
      co.elastic.metrics/metricsets: docker
      co.elastic.metrics/hosts: '$${data.host}:80'
      co.elastic.metrics/period: 10s
      co.elastic.logs/module: mercure
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error
###< symfony/mercure-bundle ###


  #JAEGER CONFIGURATION

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.54
    ports:
      - "5575:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    labels:
      traefik.http.routers.jaeger.rule: Host(`jaeger.docker.localhost`)
      traefik.http.routers.jaeger.entrypoints: web
      traefik.http.routers.jaeger.service: jaeger
      traefik.http.services.jaeger.loadbalancer.server.port: 16686





  #PROMETHEUS CONFIGURATION

  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    labels:
      traefik.http.routers.prometheus.rule: Host(`prometheus.localhost`)
      traefik.http.routers.prometheus.service: prometheus
      traefik.http.services.prometheus.loadbalancer.server.port: 9090

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    environment:
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    labels:
      traefik.http.routers.grafana.rule: Host(`grafana.localhost`)
      traefik.http.routers.grafana.service: grafana
      traefik.http.services.grafana.loadbalancer.server.port: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./grafana/dashboards/json:/var/lib/grafana/dashboards



  #ELK STACK CONFIGURATION

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
      

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elasticsearchdata:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  metricbeat:
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/metricbeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata:/usr/share/metricbeat/data
      - "./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600


  filebeat:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    command:
      - --strict.perms=false
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata:/usr/share/filebeat/data
      - ./logs/symfony:/var/log/symfony
      - ./logs/caddy:/var/log/caddy
      - ./logs/mercure:/var/log/mercure
      - "./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600

  logstash:
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    ports:
      - "9600"
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata:/usr/share/logstash/data
      - "./logs/logstash/pipeline:/usr/share/logstash/pipeline:ro"
      - ./logs/logstash/conf.d:/etc/logstash/conf.d
      - ./logs/symfony:/var/log/symfony
      - ./logs/caddy:/var/log/caddy
      - ./logs/mercure:/var/log/mercure
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200


volumes:
  certs:
    driver: local
  elasticsearchdata:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata:
    driver: local
  filebeatdata:
    driver: local
  logstashdata:
    driver: local
